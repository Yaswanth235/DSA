The two most commonly used representations for graphs are

1.Adjacency Matrix
2.Adjacency Lists

Adjacency Matrix:

An adjacency matrix of a graph is a two-dimensional array of size n x n, where n is the number of nodes in the graph, 
with the property that a[i][j]=1 if the edge (vᵢ,vⱼ) is in the set of edges, and a[i][j]=0 if there is no such edge.

We need to store these edges so that future algorithms can be performed. Are the nodes zero-based or one-based? In this case, 
the nodes follow one-based indexing as the last node is 5 and the total number of nodes is also 5. Now, define an adjacency matrix of size (n+1) x (n+1), 
i.e., adj[n+1][n+1]. If there is an edge between 1 and 2, mark 1 at (1,2) and (2,1) as there is an edge between 2 and 1 as well (in the case of an undirected graph). 
Similarly, follow for other edges.

This matrix will tell if there is an edge between two particular nodes. For example, there is an edge between 5 and 3 as 1 is at (5,3) 
but there is no edge between 5 and 1 as the space is empty (or can be filled with 0) at position (5,1) in the adjacency matrix.
The space needed to represent a graph using its adjacency matrix is n² locations. Space complexity = (n*n), It is a costly method as n² locations are consumed.


Code:

int main(){
    int n, m;
    cin >> n >> m;
    // adjacency matrix for undirected graph
    // time complexity: O(n)
    int adj[n+1][n+1];
    for(int i=0;i<m;i++){
        int u,v;
        cin>>u>>v;
        adj[u][v]=1;
        adj[v][u]=1  // this statement will be removed in case of directed graph
    }
    return 0;
}


Adjacency List:

In the previous storing method, we saw it was taking n² space to store the graph, this is where the adjacency list comes into the picture, 
it takes a very less amount of space.

This is a node-based representation. In this representation, we associate with each node a list of nodes adjacent to it. Normally an array is used to store the nodes. 
The array provides random access to the adjacency list for any particular node.

To create an adjacency list, we will create an array of size n+1 where n is the number of nodes.
This array will contain a list, so in C++ list is nothing but the vector of integers.

                vector<int>adj[n+1];

Now every index is containing an empty vector/ list. With respect to the example, 6 indexes contain empty vectors.

Code:

int main(){
    int n, m;
    cin >> n >> m;
    // adjacency list for undirected graph
    // time complexity: O(2E)
    vector<int> adj[n+1];
    for(int i=0;i<m;i++){
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);//this line will not be there for directed graph.
    }
    return 0;
}














