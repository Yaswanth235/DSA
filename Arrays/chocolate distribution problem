Given an array A[ ] of positive integers of size N, where each value represents the number of chocolates in a packet. Each packet can have a variable number of chocolates. There are M students, the task is to distribute chocolate packets among M students such that :
1. Each student gets exactly one packet.
2. The difference between maximum number of chocolates given to a student and minimum number of chocolates given to a student is minimum.

Dry Run:

N=8 M=5.

3  4  1  9  56  7  9  12

Approach is to sort the array and return the minimum difference.


    
3  4  1  9  56  7  9  12

1. sort the array and place i on 1st index and j on m-1 index.


i                    j
1   3   4   7   9    9    12     56

In above example,

 a[j]-a[i]=8;
j++,i++;
a[j]-a[i]=6(this is minimum difference).

Returning the minimum difference of a[j] and a[i]. We have to traverse the array until j exceeds the last index.

Code:

long long findMinDiff(vector<long long> a, long long n, long long m){
        //sort the array
        int i=0;
        int j=m-1;
        long long d=INT_MAX;
        sort(a.begin(),a.end());
        while(j<n){
            d=min(d, a[j]-a[i]);
            j++;
            i++;
        }
          
    return d;
