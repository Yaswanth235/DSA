Given an array arr[] of N non-negative integers representing the height of blocks. If width of each block is 1, compute how much water can be trapped between the blocks during the rainy season. 

concepts used: Array Preprocessing.

Approach:

1. take two arrays left[n],right[n].
2. preprocess the array from left side and right side of arr.
3. add the result (min(left[i],right[i])-arr[i]) to the answer.

Code:

long long trappingWater(int arr[], int n){
        int left[n],right[n];
        long long s=0;
        left[0]=arr[0];
        for(int i=1;i<n;i++){
            left[i]=max(arr[i],left[i-1]);
        }
        right[n-1]=arr[n-1];
        for(int i=n-2;i>=0;i--){
            right[i]=max(right[i+1],arr[i]);
        }
        for(int i=0;i<n;i++){
            s+=min(left[i],right[i])-arr[i];
        }
        return s;
    }
