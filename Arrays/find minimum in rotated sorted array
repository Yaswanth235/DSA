Approach:

using binary search

find middle element.
since the array is rotated and sorted,array is divided at minimum element

low       mid      high
  4  5  6  7  0  1  2
  
  if middle element is greater than 1st element,minimum element exists in second part of array.
  so update low to mid+1.
  if less than 1st element, middle element is in second part so minimize the element and update high to mid-1.
  
  code:
  
   int findMin(vector<int>& nums) {
        if(nums[0]<nums.back())return nums[0];
        if(nums.size()==1)return nums[0];
        int low=0;
        int ans=INT_MAX;
        int high=nums.size()-1;
        while(low<=high){
            int mid=low+(high-low)/2;
            if(nums[mid]>=nums[0]){
                low=mid+1;
            }
            else{
               ans=min(ans,nums[mid]);
               high=mid-1;
            }
        }
        return ans;
    }
