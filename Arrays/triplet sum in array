Given an array arr of size n and an integer X. Find if there's a triplet in the array which sums up to the given integer X.

Approach:

using set:

1. intialize the set to check whether value is present in array or not.
2. store the value x = target-present element(A[i]).
3. run another loop to find whether x-A[j] is present in set or not.
4. if present,break the loop and return the answer.

code:

 bool find3Numbers(int A[], int n, int X)
    {
        bool ans=false;;
        for(int i=0;i<n;i++){
            unordered_set<int>s;
            int d=X-A[i];
            for(int j=i+1;j<n;j++){
                if(s.find(d-A[j])!=s.end()){
                    ans=true;
                    break;
                }
                s.insert(A[j]);
            }
        }
        return ans;
    }
TC:O(N^2)
SC:O(N)
    
 Approach 2: two pointer approach
 
 1. sort the array
 2. take 3 pointers i,l,r
 ex: 
     i  l        r
     1  2  3  4  6
     
3. run the loop until i<n-2
4. while(l<r)
check if a[i]+a[l]+a[r]==target. if equal,return true.
if sum is greater than target, decrement r.
else increment l.

code:
bool find3Numbers(int A[], int n, int X)
    {
        sort(A,A+n);
        for(int i=0;i<n-2;i++){
            int l=i+1;
            int r=n-1;
        while(l<r){
            if(A[i]+A[l]+A[r]==X){return true;
               break;
            }
            else if(A[i]+A[l]+A[r]<X)l++;
            else r--;
           }
          
        }
        return false;
    }
 
