Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.
k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.
You may not alter the values in the list's nodes, only nodes themselves may be changed.

Code:

class Solution {
public:
    ListNode*reverseKGroup(ListNode* head,int k){
          vector<int>v;
          ListNode*temp=head;
          while(temp!=NULL){
             v.push_back(temp->val);
             temp=temp->next;
          }
        int n=v.size();
         for (int i=0;i<v.size();i+=k) {
            if (i+k>v.size()){
                break;
            }
            reverse(v.begin()+i,v.begin()+i+k);
        }
         ListNode*dummy=new ListNode();
        ListNode*temp2=dummy;
        for(int i=0;i<v.size();i++){
            ListNode*newnode= new ListNode(v[i]);
           dummy->next=newnode;
            dummy=dummy->next;
        }
        return temp2->next;
        
  }
};

